{% extends "base.html.j2" %}
{% import "blocks.html.j2" as block_macros %}
{% import "dialogs.html.j2" as dialogs %}
{% block head %}
  {{ super() }}
  <script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
  <link rel="stylesheet"
        href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css"
        type="text/css"/>
  <style>
  /* dropzone multi file upload css override*/
  .dropzone .dz-preview .dz-progress {
    height: 6px;
    top: 85%;
  }
  
.btn-oc {
  --bs-btn-font-weight: 600;
  --bs-btn-color: var(--bs-primary);
  --bs-btn-bg: var(--bs-white);
  --bs-btn-border-radius: 0rem;
  --bs-btn-active-color: var(--bs-white);
  --bs-btn-active-bg: var(--bs-primary);
  --bs-btn-active-border-color: var(--bs-primary);
  }
  </style>
{% endblock head %}
{% block body %}
  <nav aria-label="breadcrumb" class="navbar-light bg-light sticky-top pb-2 pt-1">
    <div class="text-bg-light">
      <ol class="breadcrumb">
        <i class="bi bi-house-door-fill"> </i>&nbsp;
        {#<li class="breadcrumb-item">{{ breadcrumbs[0]['label'] }}</li>#}
        {% for element in breadcrumbs[:-1] %}
          <li class="breadcrumb-item">
            <a href="{{ url_for('browse_bp.collection_browse', collection=element['url'])}}">{{ element['label'] }}</a>
          </li>
        {% endfor %}
        <li class="breadcrumb-item active" aria-current="page">{{ breadcrumbs[-1]['label'] }}</li>
      </ol>
    </div>
  </nav>
  <div class="row">
    <div class="col-12 mr-auto">
      <h2 class="mb-4">{{ collection.name }}</h2>
    </div>
  </div>
  {% if (('own' in current_user_rights) or ('modify object' in current_user_rights)) %}
    <div class="d-flex justify-content-end">
      <div class="col-3 mr-auto">
        <button type="button"
                class="btn btn-primary"
                data-bs-toggle="modal"
                data-bs-target="#addCollection">
          Add collection
        </button>
      </div>
      <div class="col-8 mr-auto">
        {# <form action="{{ url_for('browse_bp.collection_upload_file')}}" method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
          <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
          <div class="input-group mb-3">
            <div class="invalid-feedback">A file to upload is required</div>
            <input type="file" class="form-control" id="newfile" name="file" required />
            <button type="submit" class="btn btn-primary">Upload</button>
            <input type="hidden" name="collection" value="{{ collection.path }}"/>
          </div>
        </form> #}
        <button class="btn btn-primary mb-2"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#multi-upload-form">
          Upload files ...
        </button>
        <div id="multi-upload-form" class="collapse">
          <form action="{{ url_for('browse_bp.collection_upload_file')}}"
                class="dropzone rounded"
                id="mango-dropzone">
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
            <input type="hidden" name="collection" value="{{ collection.path }}"/>
          </form>
          <button class="btn btn-primary mt-2 float-end" id="submit-all">Start uploading all files</button>
        </div>
      </div>
    </div>
  {% endif %}
  <ul class="nav nav-tabs" role="tablist">
    <li class="nav-item" role="presentation">
      <a class="nav-link active"
         href="#content"
         id="content-tab"
         data-bs-toggle="tab"
         data-bs-target="#collection-content"
         type="button"
         role="tab"
         aria-controls="collection-tab"
         aria-selected="true">
        Content
      </a>
    </li>
    <li class="nav-item" role="presentation">
      <a class="nav-link"
         href="#metadata"
         id="metadata-tab"
         data-bs-toggle="tab"
         data-bs-target="#collection-metadata"
         type="button"
         role="tab"
         aria-controls="collection-metadata"
         aria-selected="false">
        Metadata
      </a>
    </li>
    <li class="nav-item" role="presentation">
      <a class="nav-link"
         href="#permissions"
         id="permissions-tab"
         data-bs-toggle="tab"
         data-bs-target="#collection-permissions"
         type="button"
         role="tab"
         aria-controls="collection-permissions"
         aria-selected="false">
        Permissions
      </a>
    </li>
  </ul>
  <div class="tab-content" id="pills-tab-content">
    <div class="tab-pane" id="collection-metadata">
      {{ block_macros.metadata_block(collection.id, collection.path.lstrip("/"), grouped_metadata, metadata_schema_filenames, schema_labels, readonly_prefixes=('mt.', 'mg.', 'irods::'), item_type="collection", current_user_rights=current_user_rights)}}
    </div>
    <div class="tab-pane show active" id="collection-content">
      <div style="width:fit-content" class="input-group my-3">
      <select class="form-select" aria-label="Select bulk operation"id="action_select">
        <option value="move">Move</option>
       {# <option value="copy">Copy</option> #}
        <option value="delete">Delete</option>
       {# <option value="download">Download</option> #}
      </select>
      <button type="button" class="btn btn-primary" onclick="apply_bulk_operation()" disabled>Apply</button>
</div>
      <table class="table table-striped table-hover mt-2" id="browseTable">
        <thead>
          <tr>
            <th scope="col" class="position-relative">
              <input class="form-check-input" type="checkbox" value="" id="select_all" aria-label="Select all rows">
              <span class="position-absolute top-0 start-0 translate-middle badge rounded-pill bg-primary"></span>
            </th>
            <th scope="col">Name</th>
            <th scope="col">Owner</th>
            <th scope="col">Created</th>
            <th scope="col">Modified</th>
            <th scope="col">Size</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {% for collection in sub_collections %}
            <tr>
              <th scope="row"><input style="vertical-align:middle" class="form-check-input checkbox-inline" type="checkbox" value="col-{{collection.path}}"
              aria-label="Select {{collection.path}}"></td>
              <td>
                <i class="bi bi-folder fs-4"></i> <a href="{{ url_for('browse_bp.collection_browse', collection=collection.path.lstrip('/'))}}">{{ collection.name }}</a>
              </td>
              <td>{{ collection.owner_name }}</td>
              <td>{{ collection.create_time | localize_datetime }}</td>
              <td>{{ collection.modify_time | localize_datetime }}</td>
              <td>
              </td>
              <td>
              </td>
            </tr>
          {% endfor %}
          {% for data_object in data_objects %}
            <tr>
              <th scope="row"><input style="vertical-align:middle" class="form-check-input checkbox-inline" type="checkbox" value="dobj-{{data_object.path}}"
              aria-label="Select {{collection.path}}"></td>
              <td>
                <i class="bi bi-file-earmark fs-4"></i><span> <a href="{{ url_for('browse_bp.view_object', data_object_path=data_object.path.lstrip('/'))}}">{{ data_object.name }}</a></span>
              </td>
              <td>
                <!--{{ data_object.__dict__ }}-->{{ data_object.owner_name }}
              </td>
              <td>
                {{ data_object.create_time | localize_datetime }}
              </td>
              <td>
                {{ data_object.modify_time | localize_datetime }}
              </td>
              <td>
                {{ data_object.size | filesizeformat }}
              </td>
              <td>
                {% if data_object.size < 20000000000 %}
                  <a href="{{ url_for('browse_bp.download_object', data_object_path = data_object.path.lstrip('/'))}}"><i class="bi bi-download"></i></a>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
      {% if 'own' in current_user_rights and collection.path != g.user_home %}
        {# and breadcrumbs|length > 2 %} #}
        <div class="row mt-5">
          <div class="col">
            <button type="button"
                    class="btn btn-danger float-end"
                    data-bs-toggle="modal"
                    data-bs-target="#delete_collection"
                    data-bs-field-ha="hihi"
                    data-bs-field-bo="hoho">
              Delete Collection
            </button>
          </div>
        </div>
        {{ dialogs.confirm_delete_dialog('delete_collection', url_for('browse_bp.delete_collection'), title='Delete collection and contents', mode='listen-many', readonly_fields = [{'name' : 'collection_path', 'value': collection.path, 'label': 'Collection Path'}], hidden_fields=[{'name':'redirect_route', 'value': url_for('browse_bp.collection_browse', collection=breadcrumbs[-2]['url'])}], modal_class="modal-xl" )}}
      {% endif %}
    </div>
    <div class="tab-pane" id="collection-permissions">
      <div class="float-end">
        <p class="mt-3">
          <form method="post"
                action="{{ url_for('browse_bp.set_inheritance', collection_path = collection.path.lstrip('/'))}}">
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}" />
            <input type="hidden" name="redirect_hash" value="#permissions"/>
            <div class="form-check form-switch">
              <label for "inheritance-checkbox" class="me-3 form-check-label">
                <b>Inheritance</b>
              </label>
              <input type="checkbox"
                     class="form-check-input"
                     name="inheritance"
                     onChange="this.form.submit()"
                     {% if collection.inheritance %}checked{% endif %}
                     {% if not 'own' in current_user_rights %}disabled{% endif %}/>
            </div>
          </form>
        </p>
      </div>
      <table class="table table-striped table-hover mt-2" id="permssions-table">
        <thead>
          <tr>
            {# <th scope="col">Select</th> #}
            <th scope="col">
              User / Group
            </th>
            <th scope="col">
              Access level
            </th>
            <th scope="col">
              Zone
            </th>
            <th>
            </th>
          </tr>
        </thead>
        <tbody>
          {% for permission in permissions %}
            <tr>
              <td>
                {{ permission.user_name }} ({{ acl_users_dict[permission.user_name] }})
              </td>
              <td>
                {{ permission.access_name }}
              </td>
              <td>
                {{ permission.user_zone }}
              </td>
              <td>
                {% if config['ACL_PROTECT_OWN'] and permission.access_name == 'own' and acl_counts['own'] < 2 %}
                  <p title="disabled: need at least 1 owner">
                    <button type="submit"
                            class="btn btn-grey"
                            disabled
                            title="At least one owner required">
                      <i class="bi bi-trash"></i>
                    </button>
                  </p>
                {% elif 'own' in current_user_rights %}
                  <form method="post"
                        action="{{ url_for('browse_bp.set_permissions', item_path=collection.path.lstrip('/')) }}">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}" />
                    <input type="hidden" name="groups" value="{{ permission.user_name }}" />
                    <input type="hidden" name="permission_type" value="null" />
                    <input type="hidden" name="redirect_hash" value="#permissions"/>
                    <button type="submit" class="btn">
                      <i class="bi bi-trash text-danger"></i>
                    </button>
                  </form>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
      {% if 'own' in current_user_rights %}
        <form method="post"
              action="{{ url_for('browse_bp.set_permissions', item_path=collection.path.lstrip('/')) }}">
          <input type="hidden" name="csrf_token" value="{{ csrf_token() }}" />
          <input type="hidden" name="redirect_hash" value="#permissions"/>
          <div class="row">
            <div class="col">
              <label for="permission_groups">
                Groups
              </label>
              <select class="form-select"
                      aria-label="Groups"
                      name="groups"
                      id="permission_groups">
                {% for group in my_groups %}
                  <option value="{{ group.name }}">
                    {{ group.name }}
                  </option>
                {% endfor %}
              </select>
            </div>
            <div class="col">
              <label for="permission_type">
                Rights
              </label>
              <select class="form-select"
                      aria-label="Groups"
                      name="permission_type"
                      id="permission_type">
                <option value="own">
                  Own
                </option>
                <option value="write">
                  Modify
                </option>
                <option value="read">
                  Read
                </option>
              </select>
            </div>
            <div class="col">
              <input type="checkbox" name="recursive" id="set_recursive" value="True"/>
              <label for="set_recursive">
                Recursive
              </label>
            </div>
            <div class="col">
              <button type="submit" class="btn btn-primary">
                Apply
              </button>
            </div>
          </div>
        </form>
      {% endif %}
      <!--{{ acl_users_dict |pprint }}-->
    </div>
  </div>
  <!-- Add meta data modal -->
  <div class="modal fade"
       id="addMetaData"
       tabindex="-1"
       aria-labelledby="addMetaDataLabel"
       aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addMetaDataLabel">
            Add metadata
          </h5>
          <button type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close">
          </button>
        </div>
        <form action="{{ url_for('metadata_bp.add_meta_data_collection')}}"
              method="post"
              enctype="multipart/form-data"
              class="row g-3 needs-validation"
              novalidate>
          <input type="hidden" name="csrf_token" value="{{ csrf_token() }}" />
          <input type="hidden" name="redirect_hash" value="#metadata"/>
          <div class="modal-body">
            <div class="mb-3">
              <label for="meta-data-name-add" class="col-form-label">
                Name
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-name-add"
                     name="meta-data-name"
                     required/>
              <div class="invalid-feedback">
                Name is required for metadata items
              </div>
            </div>
            <div class="mb-3">
              <label for="meta-data-value-add" class="col-form-label">
                Value
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-value-add"
                     name="meta-data-value"
                     required/>
              <div class="invalid-feedback">
                A value is required for metadata items
              </div>
            </div>
            <div class="mb-3">
              <label for="meta-data-units-add" class="col-form-label">
                Unit
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-units-add"
                     name="meta-data-units"/>
              <div class="valid-feedback">
                A unit is not required for metadata
              </div>
            </div>
            <input type="hidden"
                   id="collection-path-add"
                   name="collection-path"
                   value="{{ collection.path }}"/>
            <input type="hidden"
                   id="target-type-add"
                   name="target-type"
                   value="collection"/>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Cancel
            </button>
            <button class="btn btn-primary" type="submit">
              Add
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!--Edit meta data nodal -->
  <div class="modal fade"
       id="editMetaData"
       tabindex="-1"
       aria-labelledby="editMetaDataLabel"
       aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editMetaDataLabel">
            Update metadata
          </h5>
          <button type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close">
          </button>
        </div>
        <form action="{{ url_for('metadata_bp.edit_meta_data_collection')}}"
              method="post"
              enctype="multipart/form-data"
              class="row g-3 needs-validation"
              novalidation>
          <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
          <input type="hidden" name="redirect_hash" value="#metadata"/>
          <div class="modal-body">
            <div class="mb-3">
              <label for="meta-data-name" class="col-form-label">
                Name
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-name"
                     name="meta-data-name"
                     required/>
              <div class="invalid-feedback">
                Metadata field name is required
              </div>
            </div>
            <div class="mb-3">
              <label for="meta-data-value" class="col-form-label">
                Value
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-value"
                     name="meta-data-value"
                     required/>
              <div class="invalid-feedback">
                Metadata field value is required
              </div>
            </div>
            <div class="mb-3">
              <label for="meta-data-units" class="col-form-label">
                Unit
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-units"
                     name="meta-data-units"/>
            </div>
            <input type="hidden"
                   id="object-path-edit"
                   name="collection-path"
                   value="{{ collection.path }}"/>
            <input type="hidden"
                   id="target-type-edit"
                   name="target-type"
                   value="collection"/>
            <input type="hidden"
                   id="orig-meta-data-name"
                   name="orig-meta-data-name"
                   value=""/>
            <input type="hidden"
                   id="orig-meta-data-value"
                   name="orig-meta-data-value"
                   value=""/>
            <input type="hidden"
                   id="orig-meta-data-units"
                   name="orig-meta-data-units"
                   value=""/>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Cancel
            </button>
            <button class="btn btn-primary" type="submit">
              Update
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- Delete modal -->
  <div class="modal fade"
       id="deleteMetaData"
       tabindex="-1"
       aria-labelledby="deleteMetaDataLabel"
       aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteMetaDataLabel">
            Delete metadata
          </h5>
          <button type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close">
          </button>
        </div>
        <form action="{{ url_for('metadata_bp.delete_meta_data_collection')}}"
              method="post"
              enctype="multipart/form-data"
              class="row g-3 needs-validation"
              novalidation>
          <input type="hidden" name="csrf_token" value="{{ csrf_token() }}" />
          <input type="hidden" name="redirect_hash" value="#metadata"/>
          <div class="modal-body">
            <div class="mb-3">
              <label for="meta-data-name-delete" class="col-form-label">
                Name
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-name-delete"
                     name="meta-data-name"
                     readonly/>
              <div class="invalid-feedback">
                Metadata field name is required
              </div>
            </div>
            <div class="mb-3">
              <label for="meta-data-value-delete" class="col-form-label">
                Value
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-value-delete"
                     name="meta-data-value"
                     readonly/>
              <div class="invalid-feedback">
                Metadata field value is required
              </div>
            </div>
            <div class="mb-3">
              <label for="meta-data-units" class="col-form-label">
                Unit
              </label>
              <input type="text"
                     class="form-control"
                     id="meta-data-units-delete"
                     name="meta-data-units"
                     readonly/>
            </div>
            <input type="hidden"
                   id="object-path-delete"
                   name="collection-path"
                   value="{{ collection.path }}"/>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Cancel
            </button>
            <button class="btn btn-danger" type="submit">
              Delete
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- Add collection modal-->
  <div class="modal fade"
       id="addCollection"
       tabindex="-1"
       aria-labelledby="addCollectionLabel"
       aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addCollectionLabel">
            Add collection
          </h5>
          <button type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close">
          </button>
        </div>
        <form action="{{ url_for('browse_bp.add_collection')}}"
              method="post"
              enctype="multipart/form-data"
              class="row g-3 needs-validation"
              novalidate>
          <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
          <div class="modal-body">
            <div class="mb-3">
              <label for="collection-name-add" class="col-form-label">
                Name
              </label>
              <input type="text"
                     class="form-control"
                     id="collection-name-add"
                     name="collection_name"
                     required/>
              <div class="invalid-feedback">
                A collection name is required
              </div>
            </div>
            <input type="hidden"
                   id="collection-path-add"
                   name="parent_collection_path"
                   value="{{ collection.path }}"/>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Cancel
            </button>
            <button class="btn btn-primary" type="submit">
              Add
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
  {# <div id="app">
  <welcome></welcome>
  <hello></hello>
  <tree-browser browse-root="{{ url_for('api_collection_tree', collection=browse_root) }}"></tree-browser>
</div>
#}
  <div class="row">
    {# temp #}
    {# {% for r in metadata_objects %}
      <p>
        {{ r|pprint }}
      </p>
    {% endfor %} #}
    {# endtemp #}
  </div>
  <!-- Delete modal -->
{% endblock body %}
{% block javascript %}
  {{ super() }}
  <script src="{{url_for('static', filename='dist/doms.js')}}"></script>
  <script>
// start Mariana-code
const tbody = document.querySelector('#browseTable tbody');
const tbody_checkboxes = tbody.querySelectorAll('input[type="checkbox"]');
const badge_counter = document.querySelector('#browseTable thead span.badge');
const go_button = document.querySelector('#collection-content button');
const select_all = document.querySelector('#browseTable input#select_all');

select_all.addEventListener('change', () => {
  if (select_all.checked) {
        tbody_checkboxes.forEach((el) => el.checked = true);
        go_button.removeAttribute('disabled');
        if (select_all.parentElement.querySelector('span.badge') == null) {
            select_all.parentElement.appendChild(badge_counter);
        }
        badge_counter.innerHTML = tbody_checkboxes.length;
    } else {
        tbody_checkboxes.forEach((el) => el.checked = false);
        go_button.setAttribute('disabled', '');
        select_all.parentElement.removeChild(badge_counter);
    }
});

tbody_checkboxes.forEach((checkbox) => {
  checkbox.addEventListener('change', () => {
        let are_checked = [...tbody_checkboxes].filter((c) => c.checked).length;
        badge_counter.innerHTML = are_checked;
        if (checkbox.checked) {
            console.log(`File "${checkbox.value}" has been selected.`);
            go_button.removeAttribute('disabled');
            if (are_checked == 1) {
                select_all.parentElement.appendChild(badge_counter)
            }
            if (are_checked == tbody_checkboxes.length) {
                select_all.checked = true;
            }
        } else {
            console.log(`File "${checkbox.value}" has been unselected.`);
            select_all.checked = false;
            if (are_checked == 0) {
                go_button.setAttribute('disabled', '');
                select_all.parentElement.removeChild(badge_counter);
            }
        }
    })
});
function apply_bulk_operation() {
  const selected_option = document.querySelector('#collection-content select');
  const selected_items = [...tbody_checkboxes].filter((c) => c.checked).map((c) => c.value);
  const n_collections = selected_items.filter((c) => c.startsWith('col-')).length;
  const n_dobjects = selected_items.filter((c) => c.startsWith('dobj-')).length;
  const n_collections_printed = `${n_collections} collection${n_collections > 1 ? "s" : ""}`;
  const n_dobjects_printed = `${n_dobjects} data object${n_dobjects > 1 ? "s" : ""}`;
  const n_items = n_collections == 0 // if there are only objects
    ? n_dobjects_printed
    : n_dobjects == 0 // if there are only collections
    ? n_collections_printed 
    : `${n_collections_printed} and ${n_dobjects_printed}`;
  if (selected_option.value == 'copy' || selected_option.value == 'move') {
    const offcanvas_dom = document.querySelector('.offcanvas#collection-tree');
    const offcanvas = new bootstrap.Offcanvas(offcanvas_dom);
    offcanvas_dom.querySelectorAll('input[type="radio"]')
        .forEach((input) => input.addEventListener('change', () => {
            offcanvas_dom.querySelectorAll('i.bi-folder-symlink-fill')
                .forEach((i) => i.remove());
            const icon = document.createElement('i');
            icon.className = 'bi bi-folder-symlink-fill ms-2';
            icon.setAttribute('style', 'font-size:1.2rem;');
            input.nextSibling.appendChild(icon);
            icon.addEventListener('click', (e) => {
                e.preventDefault();
                const action = selected_option.value == 'copy' ? 'copied' : 'moved';
                const destination = input.value;
                const toast = new Toast(selected_option.value + '-items',
                `${n_items} will be ${action} to "${destination}."`);
                toast.show(() => {
                    console.log('MOVED');
                    offcanvas.toggle();
                    select_all.checked = false;
                    tbody_checkboxes.forEach((c) => c.checked = false);
                    go_button.setAttribute('disabled', '');
                    select_all.parentElement.removeChild(badge_counter);
                });
            });
        }));
    offcanvas.toggle();
  } else {
    const toast = new Toast(selected_option.value + '-items',
    `${n_items} will be deleted.`);
    toast.show(() => {
      console.log('DELETED');
      select_all.checked = false;
      tbody_checkboxes.forEach((c) => c.checked = false);
      go_button.setAttribute('disabled', '');
      select_all.parentElement.removeChild(badge_counter);
      });
  }
}

class OffCanvas {
  constructor(id) {
    this.offcanvas = Field.quick('div', 'offcanvas offcanvas-end');
    this.offcanvas.id = id;
    this.offcanvas.tabIndex = '-1';
    this.offcanvas.setAttribute('aria-labelledby', 'offcanvas-label');
    this.offcanvas.setAttribute('data-bs-backdrop', 'static');
    this.add_header();
    this.add_body();

  }

  add_header() {
    const offcanvas_header = Field.quick('quick', 'offcanvas-header');

    const offcanvas_h5 = Field.quick('h5', 'offcanvas-label', 'Select destination collection');
    offcanvas_h5.id = 'offcanvas-label';
    offcanvas_header.appendChild(offcanvas_h5);

    const offcanvas_close = Field.quick('button', 'btn-close');
    offcanvas_close.type = 'button';
    offcanvas_close.setAttribute('data-bs-dismiss', 'offcanvas');
    offcanvas_close.setAttribute('aria-label', 'Close');
    offcanvas_header.appendChild(offcanvas_close);

    this.offcanvas.appendChild(offcanvas_header);
  }

  add_body() {
    this.body = Field.quick('form', 'offcanvas-body offcanvas-tree');

    this.offcanvas.appendChild(this.body);
  }

  append_to(container) {
    container.appendChild(this.offcanvas);
  }
}

class TreeElement {
  constructor({ id, label, children = undefined } = {}) {
    this.has_children = children != undefined;
    if (this.has_children) {
      this.children = children;
    }
    this.id = id.replaceAll('/', '-');
    this.value = id;
    this.label_name = label;
    this.input = this.create_input();
    this.label = this.create_label();
  }

  append_to(parent_element) {
    parent_element.appendChild(this.input);
    parent_element.appendChild(this.label);
    if (this.children != undefined) {
      const collapse = this.create_collapse();
      parent_element.appendChild(collapse);
    }
  }

  create_input() {
    const input = Field.quick('input', 'btn-check');
    input.type = 'radio';
    input.name = 'destination';
    input.id = this.id + '-radio';
    input.value = this.value;
    input.setAttribute('autocomplete', 'off');
    if (this.has_children) {
      input.setAttribute('data-bs-toggle', 'collapse');
      input.setAttribute('data-bs-target', `#${this.id}-collapse`);
      input.setAttribute('aria-expanded', 'false');
      input.setAttribute('aria-controls', this.id + '-collapse');  
    }
    
    return input;
  }

  create_label() {
    const label = Field.quick('label', 'btn btn-oc text-start');
    label.setAttribute('for', this.id + '-radio');
    const collection_name = document.createElement('span');
    collection_name.innerHTML = this.label_name;
    label.appendChild(collection_name);

    if (this.has_children) {
      let icon = Field.quick('i', 'bi bi-caret-right-fill me-2');
      label.insertBefore(icon, collection_name);  
    }

    return label;
  }

  create_collapse() {
    if (!this.has_children) {
      return;
    }
    
    const collapse = Field.quick('div', 'collapse ps-3 w-100');
    collapse.id = this.id + '-collapse';
    const icon = this.label.querySelector('i.bi');

    // the events below have an if statement because otherwise the icons of
    // the parent folders also change
    collapse.addEventListener('shown.bs.collapse', () => {
      if (collapse.classList.contains('show')) {
        icon.classList.replace('bi-caret-right-fill', 'bi-caret-down-fill');
      }
    });

    collapse.addEventListener('hidden.bs.collapse', () => {
      if (!collapse.classList.contains('show')) {
        icon.classList.replace('bi-caret-down-fill', 'bi-caret-right-fill');
      }
    });

    const sub_button_group = TreeElement.create_button_group();
    collapse.appendChild(sub_button_group);

    this.children.forEach((tree_element) => {
      new TreeElement(tree_element).append_to(sub_button_group);
    });

    return collapse;
  }

  static create_button_group() {
    const button_group = Field.quick('div', 'btn-group-vertical w-100');
    button_group.role = 'group';
    button_group.setAttribute('aria-label', 'Collection tree to select destination');
    return button_group;
  }
}

const offcanvas = new OffCanvas('collection-tree');
const button_group = TreeElement.create_button_group();
offcanvas.body.appendChild(button_group);
offcanvas.append_to(document.getElementById('collection-content'));

var xhr = new XMLHttpRequest();
function create_tree() {
  const tree = JSON.parse(this.responseText);
  tree.forEach((tree_element) => {
    new TreeElement(tree_element).append_to(button_group);
  });
}
xhr.addEventListener('load', create_tree);
xhr.open("GET", "/api/collection/tree");
xhr.send();


// end Mariana-code

//function for applying action on all selected collections/files
function applyAction() {
  let action = document.getElementById("action_select").value;
  let selectedCollections = [];
  let selectedDataObjects = [];
  let rows = document.getElementById("browseTable").querySelectorAll("tr");
  let checkboxes = rows[0].querySelectorAll("[type=checkbox]");
  for (const checkbox of checkboxes){
    if (checkbox.checked){
      selectedDataObjects.push(checkbox.value);
    }
  }
  checkboxes = rows[1].querySelectorAll("[type=checkbox]");
  for (const checkbox of checkboxes){
    if (checkbox.checked){
      selectedCollections.push(checkbox.value);
    }
  }
  console.log(selectedCollections);
  console.log(selectedDataObjects)
  if (selectedCollections.length > 0 || selectedDataObjects.length > 0){
    switch(action) {
      case "move":
        // move selected items
        let treeBrowser = document.getElementById("tree_browser");
        tree_browser.style = "display: block!important";
        break;
      case "delete":
        // deleted selected items, TODO: api call
        for (const path of selectedCollections){
          var xhr = new XMLHttpRequest();
          xhr.open("POST", "{{url_for('browse_bp.delete_collection')}}");
          var formData = new FormData();
          formData.append("collection_path", path);
          xhr.send(formData);
        }
        for (const path of selectedDataObjects){
          var xhr = new XMLHttpRequest();
          xhr.open("POST", "{{url_for('browse_bp.delete_data_object')}}");
          var formData = new FormData();
          formData.append("data_object_path", path);
          xhr.send(formData);
        }
        break;
    }
  }

}

var editMetaData = document.getElementById('editMetaData')
editMetaData.addEventListener('show.bs.modal', function (event) {
  // Button that triggered the modal
  var button = event.relatedTarget
  // Extract info from data-bs-* attributes
  var fieldMDName = button.getAttribute('data-bs-meta-data-name')
  var fieldMDValue = button.getAttribute('data-bs-meta-data-value')
  var fieldMDUnit = button.getAttribute('data-bs-meta-data-units')
  var fieldObjectPath = button.getAttribute('data-bs-data-path')
  // If necessary, you could initiate an AJAX request here
  // and then do the updating in a callback.
  //
  // Update the modal's content.
  var modalTitle = editMetaData.querySelector('.modal-title')
  var modalBodyInputMDName = editMetaData.querySelector('#meta-data-name')
  var modalBodyInputMDValue = editMetaData.querySelector('#meta-data-value')
  var modalBodyInputMDUnit = editMetaData.querySelector('#meta-data-units')
  var modalBodyInputDataPath = editMetaData.querySelector('#object-path')

  var modalBodyInputOrigMDName = editMetaData.querySelector('#orig-meta-data-name')
  var modalBodyInputOrigMDValue = editMetaData.querySelector('#orig-meta-data-value')
  var modalBodyInputOrigMDUnit = editMetaData.querySelector('#orig-meta-data-units')


  //modalTitle.textContent = 'Data object ' +
  modalBodyInputMDName.value = fieldMDName
  modalBodyInputMDValue.value = fieldMDValue
  modalBodyInputMDUnit.value = fieldMDUnit
  modalBodyInputDataPath = fieldObjectPath

  modalBodyInputOrigMDName.value = fieldMDName
  modalBodyInputOrigMDValue.value = fieldMDValue
  modalBodyInputOrigMDUnit.value = fieldMDUnit

})

//// Delete meta data listener for modal

var deleteMetaData = document.getElementById('deleteMetaData')
deleteMetaData.addEventListener('show.bs.modal', function (event) {
  // Button that triggered the modal
  var button = event.relatedTarget
  // Extract info from data-bs-* attributes
  var fieldMDName = button.getAttribute('data-bs-meta-data-name')
  var fieldMDValue = button.getAttribute('data-bs-meta-data-value')
  var fieldMDUnit = button.getAttribute('data-bs-meta-data-units')
  var fieldObjectPath = button.getAttribute('data-bs-data-path')
  // If necessary, you could initiate an AJAX request here
  // and then do the updating in a callback.
  //
  // Update the modal's content.
  var modalTitle = deleteMetaData.querySelector('.modal-title')
  var modalBodyInputMDName = deleteMetaData.querySelector('#meta-data-name-delete')
  var modalBodyInputMDValue = deleteMetaData.querySelector('#meta-data-value-delete')
  var modalBodyInputMDUnit = deleteMetaData.querySelector('#meta-data-units-delete')
  var modalBodyInputDataPath = deleteMetaData.querySelector('#object-path-delete')


  //modalTitle.textContent = 'Data object ' +
  modalBodyInputMDName.value = fieldMDName
  modalBodyInputMDValue.value = fieldMDValue
  modalBodyInputMDUnit.value = fieldMDUnit
  modalBodyInputDataPath = fieldObjectPath

})

// open the active tab if specified by simulating a click() :)
var hash = window.location.hash;
hash && document.querySelector('a[href="'+hash+'"]').click()

// multi file upload Zone
// Note that the name "mangoDropzone" is the camelized id of the form.
Dropzone.options.mangoDropzone = {

    autoProcessQueue: false,
    dictDefaultMessage: "Click or drag files to upload here. When your selection is ready, click the buttton below to start the upload.",
    init: function () {
      var submitButton = document.querySelector("#submit-all")
      ourDropzone =  this;
      submitButton.addEventListener("click", function() {
        ourDropzone.processQueue();
      });
      // if there are more than the parallel uploads parameter, ensure that all get uploaded
      this.on("processing", function() { ourDropzone.options.autoProcessQueue = true; });
      // reload the page at the end to show the uploaded files in iRODS
      this.on('queuecomplete', function () {
        location.reload();
      });
    }
  };
//Dropzone.discover(); // from version 6 (using version 5.x)

  </script>
{% endblock javascript %}
